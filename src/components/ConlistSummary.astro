---
import { type Event } from '../event';

interface Props {
	events: Event[];
	dateCutoff: Date;
}

const { events, dateCutoff } = Astro.props;

const seriesEvents: Record<string, Event[]> = {};
events.forEach((e) => {
	if (!(e.series in seriesEvents)) {
		seriesEvents[e.series] = [];
	}
	seriesEvents[e.series]!.push(e);
});

const sortedSeries = Object.keys(seriesEvents);
sortedSeries.sort();
Object.values(seriesEvents).forEach((e) => {
	e.sort((a, b) => {
		// Sort undefined start dates after defined start dates
		if (!a.startDate && !b.startDate) {
			return 0;
		} else if (!a.startDate) {
			return 1;
		} else if (!b.startDate) {
			return -1;
		} else {
			return a.startDate > b.startDate ? 1 : -1;
		}
	});
});
---

<ul class="conlist-summary">
	{
		sortedSeries.map((s) => (
			<li>
				{/*
				 * Use prettier-ignore to prevent extra spaces
				 * https://github.com/withastro/prettier-plugin-astro/issues/308
				 */}
				{/* prettier-ignore */}
				<><span class="conlist-summary-series">{s}</span>{': '}</>
				{seriesEvents[s]!.map((e) => {
					let EventElement: string;
					if (
						!e.startDate ||
						e.startDate >= dateCutoff ||
						e.status === 'Tentative'
					) {
						EventElement = 'i';
					} else if (e.status === 'Not Attending') {
						EventElement = 's';
					} else {
						EventElement = 'span';
					}

					return (
						// prettier-ignore
						<EventElement class="conlist-summary-event" data-status={e.status}>{e.specifier}</EventElement>
					);
				}).reduce((a, v) => (!a ? [v] : [...a, ', ', v]), null)}
			</li>
		))
	}
</ul>
